using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Diagnostics;
using System;
using System.IO;

public class Python_test : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        //运行python脚本
       /* var options = new Dictionary<string, object>();
        options["Frames"] = true;
        options["FullFrames"] = true;
        var engine = IronPython.Hosting.Python.CreateEngine(options);
        var scope = engine.CreateScope();
        var paths = engine.GetSearchPaths();
        paths.Add(@"C:\Python27\Lib\site-packages");
        engine.SetSearchPaths(paths);
        var source = engine.CreateScriptSourceFromFile("yanyixian.py");
        source.Execute(scope);
        //调用无返回值函数
        //func = scope.GetVariable<Func<object>>("say_hello");
        //say_hello();
        //调用有返回值函数
        //func = scope.GetVariable<Func<object>>("add");
        //var text = get_text().ToString();
        //调用带参函数
        func = scope.GetVariable<Func<object, object,object>>("add");*/


    }

    // Update is called once per frame
    void Update()
    {
        if (Input.GetKeyUp(KeyCode.LeftControl))
        {
            //Pythonnet();
            //string result = p.run_cmd("ping.exe", "8.8.8.8 -n 2");
            //string result = runPython(@"C:\Users\YYX\Desktop\YAN\yanyixiansb.py", "\"Form C#:\"");
            string result = UsePython("");
            //print(result.ToString());
            //var result = func(1, 2);
        }
    }

    /*public void Pythonnet()
    {
        using (Py.GIL())
        {
            dynamic np = Py.Import("numpy");
            dynamic pd = Py.Import("pandas");
            //dynamic sk = Py.Import("sklearn");
            print(np.cos(np.pi * 2));               
        }
    }*/

    public string UsePython(string dataStr)
    {
        //string result = runPyFunc(@"C:\Users\YYX\Desktop\YAN", "yanyixian", "findType", dataStr);
        string result = runPyFunc(@"C:\Users\YYX\Desktop\YAN", "yanyixian", "add", "4,4");
        return result;
    }
    public string runPyFunc(string path, string filename, string functionname, string parameter)
    {
        string cmd = string.Format("-c \"import sys;sys.path.append('{0}');import {1};print({1}.{2}({3}))\"", path, filename, functionname, parameter);
        return run_cmd(@"C:\Python27\python.exe", cmd);
    }

    public string runPython(string filename, string cmd)
    {
        string cmd1 = string.Format("{0} {1}", filename, cmd);
        return run_cmd(@"C:\Python27\python.exe", cmd1);
    }

    public string run_cmd(string program, string cmd)
    {
        ProcessStartInfo start = new ProcessStartInfo();
        start.FileName = program;
        start.Arguments = cmd;
        start.UseShellExecute = false;          // Do not use OS shell
        start.CreateNoWindow = true;            // We don't need new window
        start.RedirectStandardOutput = true;    // Any output, generated by application will be redirected back
        start.RedirectStandardError = true;     // Any error in standard output will be redirected back (for example exceptions)
        using (Process process = Process.Start(start))
        {
            using (StreamReader reader = process.StandardOutput)
            {
                string result = process.StandardError.ReadToEnd();
                if (result == null || result == "")
                {
                    result = reader.ReadToEnd();
                }
                return result;
            }
        }
    }

}
